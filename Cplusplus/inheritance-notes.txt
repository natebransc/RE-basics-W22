
In this note we'll explore the implementation of C++ inheritance, on a simple but iconic
example.

================[ The Example ]=================

This example is very often used to demonstrate the use of inheritance/polymorphism/virtual
functions to enable a convenient generic style of programming.

Imagine that we are writing a graphics editor or a windowing system. We will be creating
and passing around collections (e.g., sets, arrays, or linked lists) of graphical objects
such as rectangles, squares, circles. Some operations on these objects will be exactly
the same regardless of the graphics, e.g., numbering and management; others will be
shape-specific, such as the pixel-level actions to draw a shape. 

We'd want to be able to traverse these collections, and draw/render every object in
them. We want such code to be generic: "here is a collection of shapes to render, do the
right thing for each". Of course, the pixel-level actions to draw a circle will be
different from drawing a square, but we want to encapsulate these differences within the
shape-specific methods/functions, while keeping all the common actions, such as traversing
collections or numbering the individual objects generic.

The following code gives a minimal example of this approach:

sergey@babylon2:~/Cplusplus$ cat shapes.hpp
#include <iostream>

// For a free online C++ reference see
//   https://en.cppreference.com/w/cpp/language/derived_class

class Shape {
private:
  int id;               // private, accesses from outside the class would not compile 
public:
  virtual void draw(){  // This function is virtual, i.e., it is meant to be
                        //  overridden in derived classes to do the specific rendering
    std::cout << "x";
  }

  int get_id(){     // typical getter. Not meant to be overridden, will be available
                    //   by all derived classes in exactly this form
    return id;
  }

  int set_id(int new_id){  // a slightly fancier setter, also not meant to be overridden
    int old_id = id;
    id = new_id;
    return old_id;
  }
};

class Circle : Shape {    // Circle inherits id, get_id(), and set_id() from Shape
public:
  void draw(){
    std::cout << "(" << id << ")";  // this is how we "draw" a circle
  }
};

class Square : Shape {    // Square inherits id, get_id(), and set_id() from Shape
public:
  void draw(){
    std::cout << "[" << id << "]";  // this is how we "draw" a square
  }
};

sergey@babylon2:~/Cplusplus$ cat shapes.cpp

#include "shapes.hpp"

int main(){
  Shape* line[10];   // array of pointers, allocated on the stack

  for(int i=0; i < 10; i++){   // create circles for odd indexes, squares for even indexes 
    line[i] = (i%2) ? (Shape*) new Circle() : (Shape*) new Square();
    line[i]->set_id(i);        // also set the id
  }

  for(int i=0; i < 10; i++){   // now draw them all, in a generic pass over the collection
    line[i]->draw();           //   this should do the right thing for each object--- 
                               //   this is the magic of virtual functions!
  }			       
  std::cout << std::endl;      
    
  return 0;
}

=================[ The Output ]=================

sergey@babylon2:~$ cd Cplusplus/
sergey@babylon2:~/Cplusplus$ g++ -Wall -o shapes shapes.cpp

sergey@babylon2:~/Cplusplus$ ./shapes 
[0](1)[2](3)[4](5)[6](7)[8](9)

=================[ The Implementation ]=================

// Also try in GDB: "set print asm-demangle on" and "set print demangle on"
//  to have GDB automatically demangle names

sergey@babylon2:~/Cplusplus$ gdb shapes
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
<skipped>

(gdb) b main 
Breakpoint 1 at 0xbae
(gdb) r
Starting program: /thayerfs/home/sergey/Cplusplus/shapes 

Breakpoint 1, 0x0000555555554bae in main ()

(gdb) disas main
Dump of assembler code for function main:
   0x0000555555554baa <+0>:	push   %rbp
   0x0000555555554bab <+1>:	mov    %rsp,%rbp
=> 0x0000555555554bae <+4>:	push   %rbx
   0x0000555555554baf <+5>:	sub    $0x78,%rsp

   0x0000555555554bb3 <+9>:	mov    %fs:0x28,%rax    // get the thread-specific stack protection cookie/canary
   0x0000555555554bbc <+18>:	mov    %rax,-0x18(%rbp) // ...and store it in the stack frame
   between the stack-based pointer array and the return address. A brute-force array
   overwrite would also overwrite this cookie value before smashing the return address,
   and we'll be checking that this value is intact before using the return address in
   "ret". Hopefully, the attacker will not know what the cookie/canary value, because it's
   different for each thread. %fs is a legacy x86 register with an interesting history,
   which is largely irrelevant, except for the fact that every thread can maintain a
   different value of it.
   Look just about the leave/ret function epilogue to see this canary value being checked.

   0x0000555555554bc0 <+22>:	xor    %eax,%eax
   0x0000555555554bc2 <+24>:	movl   $0x0,-0x78(%rbp) // first loop variable "i"  
   0x0000555555554bc9 <+31>:	cmpl   $0x9,-0x78(%rbp)
   0x0000555555554bcd <+35>:	jg     0x555555554c55 <main+171>
   0x0000555555554bd3 <+41>:	mov    -0x78(%rbp),%eax // fetch "i" and 
   0x0000555555554bd6 <+44>:	and    $0x1,%eax        //   test it for being 
   0x0000555555554bd9 <+47>:	test   %eax,%eax        //     even or odd  
   0x0000555555554bdb <+49>:	je     0x555555554c05 <main+91>  // if even, jump away here
   0x0000555555554bdd <+51>:	mov    $0x10,%edi       // this is the size of a Circle object
   0x0000555555554be2 <+56>:	callq  0x555555554a40 <_Znwm@plt> // Demangled, this stands for "operator new(unsigned long)" [check with 'c++filt _Znwm']. We allocate a new Circle here.
   0x0000555555554be7 <+61>:	mov    %rax,%rbx        // "this" of the newly created Circle
   0x0000555555554bea <+64>:	movq   $0x0,(%rbx)      // zero out the first 64-bit and 
   0x0000555555554bf1 <+71>:	movl   $0x0,0x8(%rbx)   //   32-bit slots of the new object
   0x0000555555554bf8 <+78>:	mov    %rbx,%rdi        // implicit argument to Circle::Circle() constructor
   0x0000555555554bfb <+81>:	callq  0x555555554e08 <_ZN6CircleC2Ev> // Circle::Circle() default constructor is called, see below 
   0x0000555555554c00 <+86>:	mov    %rbx,%rdx        // "this" is now in rdx
   0x0000555555554c03 <+89>:	jmp    0x555555554c2b <main+129>
   0x0000555555554c05 <+91>:	mov    $0x10,%edi      // Same actions for creating a Square
---Type <return> to continue, or q <return> to quit---
   0x0000555555554c0a <+96>:	callq  0x555555554a40 <_Znwm@plt>
   0x0000555555554c0f <+101>:	mov    %rax,%rbx
   0x0000555555554c12 <+104>:	movq   $0x0,(%rbx)
   0x0000555555554c19 <+111>:	movl   $0x0,0x8(%rbx)
   0x0000555555554c20 <+118>:	mov    %rbx,%rdi
   0x0000555555554c23 <+121>:	callq  0x555555554e32 <_ZN6SquareC2Ev>
   0x0000555555554c28 <+126>:	mov    %rbx,%rdx
   0x0000555555554c2b <+129>:	mov    -0x78(%rbp),%eax  // branches for Circle and Square merge here; fetch "i"
   0x0000555555554c2e <+132>:	cltq                     //  ..and sign-extend it
   0x0000555555554c30 <+134>:	mov    %rdx,-0x70(%rbp,%rax,8)  // save "this" into line[]
   0x0000555555554c35 <+139>:	mov    -0x78(%rbp),%eax
   0x0000555555554c38 <+142>:	cltq   
   0x0000555555554c3a <+144>:	mov    -0x70(%rbp,%rax,8),%rax  // get the i-th pointer
   0x0000555555554c3f <+149>:	mov    -0x78(%rbp),%edx   
   0x0000555555554c42 <+152>:	mov    %edx,%esi    // "i" as the second argument
   0x0000555555554c44 <+154>:	mov    %rax,%rdi    // "this" as the first, and pass to..
   0x0000555555554c47 <+157>:	callq  0x555555554d3e <_ZN5Shape6set_idEi> // .. Shape::set_id(int) -- note that it's a function of the Shape base class
   0x0000555555554c4c <+162>:	addl   $0x1,-0x78(%rbp)  // i += 1
   0x0000555555554c50 <+166>:	jmpq   0x555555554bc9 <main+31>  // back to the top of the loop
   0x0000555555554c55 <+171>:	movl   $0x0,-0x74(%rbp)  // set up the second loop variable 
   0x0000555555554c5c <+178>:	cmpl   $0x9,-0x74(%rbp)
   0x0000555555554c60 <+182>:	jg     0x555555554c87 <main+221>
   0x0000555555554c62 <+184>:	mov    -0x74(%rbp),%eax
   0x0000555555554c65 <+187>:	cltq   
   0x0000555555554c67 <+189>:	mov    -0x70(%rbp,%rax,8),%rdx
---Type <return> to continue, or q <return> to quit---q
Quit

// Let's see what the default constructor does. Recall that
//  demangling with 'c++filt _ZN6CircleC2Ev' gives "Circle::Circle()",
//  'c++filt _ZTV6Circle' gives "vtable for Circle", etc.

// There are three metadata structures created by the compiler in the .data section for 
// each class here, Shape, Circle, and Square: the virtual function table (vtable), the
// type info structure, and the string for the name, referenced from the type info
// structure. The constructors for these classes will insert pointers to the vtable
// into every instance of the object they construct. Vtable objects point to the
// respective type info objects, and these point to the string names.

// The names of these structures will be mangled and will appear as _ZTV5Shape, _ZTI5Shape,
// _ZTS5Shape and so on. You can use the command line tool c++filt or a web site
// like demangler.com to get their readable names.

(gdb) disas 0x555555554e08
Dump of assembler code for function _ZN6CircleC2Ev:  // Circle::Circle()
   0x0000555555554e08 <+0>:	push   %rbp
   0x0000555555554e09 <+1>:	mov    %rsp,%rbp
   0x0000555555554e0c <+4>:	sub    $0x10,%rsp
   0x0000555555554e10 <+8>:	mov    %rdi,-0x8(%rbp)  // "this" Circle* pointer
   0x0000555555554e14 <+12>:	mov    -0x8(%rbp),%rax  // OK, this will be optimized away
   0x0000555555554e18 <+16>:	mov    %rax,%rdi        //   ..and this too..
   0x0000555555554e1b <+19>:	callq  0x555555554dee <_ZN5ShapeC2Ev>  // Shape::Shape() parent/base class constructor
   0x0000555555554e20 <+24>:	lea    0x200ed1(%rip),%rdx        # 0x555555755cf8 <_ZTV6Circle+16> // pointer to the first virtual function in this class' vtable, _ZTV6Circle
   0x0000555555554e27 <+31>:	mov    -0x8(%rbp),%rax  // ..will be stored into the object
   0x0000555555554e2b <+35>:	mov    %rdx,(%rax)      // ..right at the "this" pointer
   0x0000555555554e2e <+38>:	nop
   0x0000555555554e2f <+39>:	leaveq 
   0x0000555555554e30 <+40>:	retq   
End of assembler dump.

(gdb) disas 0x555555554dee
Dump of assembler code for function _ZN5ShapeC2Ev:      // Shape's constructor
   0x0000555555554dee <+0>:	push   %rbp
   0x0000555555554def <+1>:	mov    %rsp,%rbp
   0x0000555555554df2 <+4>:	mov    %rdi,-0x8(%rbp)  // "this"
   0x0000555555554df6 <+8>:	lea    0x200f13(%rip),%rdx        # 0x555555755d10 <_ZTV5Shape+16>
   0x0000555555554dfd <+15>:	mov    -0x8(%rbp),%rax  // still "this"
   0x0000555555554e01 <+19>:	mov    %rdx,(%rax)      // store a pointer to vtable into this object 
   0x0000555555554e04 <+22>:	nop
   0x0000555555554e05 <+23>:	pop    %rbp
   0x0000555555554e06 <+24>:	retq   
End of assembler dump.

// pointer to the first virtual function in Shape:

(gdb) x/a 0x555555755d10
0x555555755d10 <_ZTV5Shape+16>:	0x555555554d1c <_ZN5Shape4drawEv>

// vtable of Shape from the beginning:

(gdb) x/3a 0x555555755d00
0x555555755d00 <_ZTV5Shape>:	0x0	0x555555755d68 <_ZTI5Shape>  // type info object for Shape, pointed to by all instances; 'c++filt _ZTI5Shape' is "typeinfo for Shape"
0x555555755d10 <_ZTV5Shape+16>:	0x555555554d1c <_ZN5Shape4drawEv>    // the first (and only) virtual function in this class.

// vtable points to a "typeinfo" metadata structure, which in turn points to
/  a generic "vtable for __cxxabiv1::__class_type_info" and the actual string
// name of the class ('c++filt _ZTS5Shape' is "typeinfo name for Shape") 

(gdb) x/2a 0x555555755d68
0x555555755d68 <_ZTI5Shape>:	0x7ffff7dc47f8 <_ZTVN10__cxxabiv117__class_type_infoE+16>	0x555555554f00 <_ZTS5Shape>
(gdb) x/s 0x555555554f00
0x555555554f00 <_ZTS5Shape>:	"5Shape"

// let's breakpoint when all the objects have been allocated and their constructors
//   have been called: 

(gdb) b *0x0000555555554c55
Breakpoint 2 at 0x555555554c55
(gdb) c
Continuing.

Breakpoint 2, 0x0000555555554c55 in main ()
(gdb) i r rbp
rbp            0x7fffffffe510	0x7fffffffe510

// Here is the 10-object array of pointers to newly created objects (at -0x70 in the
//  stack frame):

(gdb) x/10a 0x7fffffffe510 - 0x70
0x7fffffffe4a0:	0x555555768e70	0x555555768e90
0x7fffffffe4b0:	0x555555768eb0	0x555555768ed0
0x7fffffffe4c0:	0x555555768ef0	0x555555768f10
0x7fffffffe4d0:	0x555555768f30	0x555555768f50
0x7fffffffe4e0:	0x555555768f70	0x555555768f90

// We can also peek at what's above this stack frame, at the top of the stack:

(gdb)  x/10a 0x7fffffffe510
0x7fffffffe510:	0x555555554e60 <__libc_csu_init>	0x7ffff767abf7 <__libc_start_main+231>
0x7fffffffe520:	0xffffffffffffff90	0x7fffffffe5f8
0x7fffffffe530:	0x1ffffff90	0x555555554baa <main>
0x7fffffffe540:	0x0	0xe07a0eb8e0244597
0x7fffffffe550:	0x555555554aa0 <_start>	0x7fffffffe5f0

// Let's look at individual objects. We'll see their vtable pointer and their private "id" members:

(gdb) x/2gx 0x555555768e70  
0x555555768e70:	0x0000555555755ce0	0x0000000000000000

(gdb) x/2gx 0x555555768e90  
0x555555768e90:	0x0000555555755cf8	0x0000000000000001

(gdb) x/2gx 0x555555768eb0  
0x555555768eb0:	0x0000555555755ce0	0x0000000000000002

(gdb) x/2gx 0x555555768ed0  
0x555555768ed0:	0x0000555555755cf8	0x0000000000000003

(gdb) x/2gx 0x555555768ef0  
0x555555768ef0:	0x0000555555755ce0	0x0000000000000004

(gdb) x/2gx 0x555555768f90
0x555555768f90:	0x0000555555755cf8	0x0000000000000009

// Let's look at those vtable pointers. They alternate between Circle's and Square's
//  virtual "draw" functions:

(gdb) x/2gx 0x555555768e70
0x555555768e70:	0x0000555555755ce0	0x0000000000000000

(gdb) x/a 0x0000555555755ce0
0x555555755ce0 <_ZTV6Square+16>:	0x555555554da8 <_ZN6Square4drawEv>

(gdb) x/a 0x0000555555755cf8
0x555555755cf8 <_ZTV6Circle+16>:	0x555555554d62 <_ZN6Circle4drawEv>

/// Looking from the top of Circle's vtable:

(gdb) x/2a 0x0000555555755ce8
0x555555755ce8 <_ZTV6Circle>:	0x0	0x555555755d40 <_ZTI6Circle>

// Circle's typeinfo structure points to a generic C++ ABI "vtable for __cxxabiv1::__vmi_class_type_info" and then to the string name 

(gdb) x/2a 0x555555755d40
0x555555755d40 <_ZTI6Circle>:	0x7ffff7dc54f8 <_ZTVN10__cxxabiv121__vmi_class_type_infoE+16>0x555555554ef8 <_ZTS6Circle>

(gdb) x/s 0x555555554ef8
0x555555554ef8 <_ZTS6Circle>:	"6Circle"

// Looking around some more, we find more typo info structures:

(gdb) x/6a 0x555555755d40
0x555555755d40 <_ZTI6Circle>:	0x7ffff7dc54f8 <_ZTVN10__cxxabiv121__vmi_class_type_infoE+16>0x555555554ef8 <_ZTS6Circle>
0x555555755d50 <_ZTI6Circle+16>:	0x100000000	0x555555755d68 <_ZTI5Shape>
0x555555755d60 <_ZTI6Circle+32>:	0x0	0x7ffff7dc47f8 <_ZTVN10__cxxabiv117__class_type_infoE+16>

// It looks like the last pointer in this type info struct is a pointer to the base class'
//  type info struct, Shape

(gdb) x/4a 0x555555755d68
0x555555755d68 <_ZTI5Shape>:	0x7ffff7dc47f8 <_ZTVN10__cxxabiv117__class_type_infoE+16>	0x555555554f00 <_ZTS5Shape>
0x555555755d78:	0x1	0x1

(gdb) x/a 0x555555554f00
0x555555554f00 <_ZTS5Shape>:	0x657061685335
(gdb) x/s 0x555555554f00
0x555555554f00 <_ZTS5Shape>:	"5Shape"

// Let's look at the Circle's draw() function:

(gdb) x/20i 0x555555554d62
   0x555555554d62 <_ZN6Circle4drawEv>:	push   %rbp
   0x555555554d63 <_ZN6Circle4drawEv+1>:	mov    %rsp,%rbp
   0x555555554d66 <_ZN6Circle4drawEv+4>:	sub    $0x10,%rsp
   0x555555554d6a <_ZN6Circle4drawEv+8>:	mov    %rdi,-0x8(%rbp)  // "this"
   0x555555554d6e <_ZN6Circle4drawEv+12>:	lea    0x172(%rip),%rsi        # 0x555555554ee7  // "("
   0x555555554d75 <_ZN6Circle4drawEv+19>:	lea    0x2012a4(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>  // "("
   0x555555554d7c <_ZN6Circle4drawEv+26>:	callq  0x555555554a30 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x555555554d81 <_ZN6Circle4drawEv+31>:	mov    %rax,%rdx
   0x555555554d84 <_ZN6Circle4drawEv+34>:	mov    -0x8(%rbp),%rax // fetch "this"
   0x555555554d88 <_ZN6Circle4drawEv+38>:	mov    0x8(%rax),%eax  /// ..and "id" off of "this" 
   0x555555554d8b <_ZN6Circle4drawEv+41>:	mov    %eax,%esi  // "id" value, 2nd arg
   0x555555554d8d <_ZN6Circle4drawEv+43>:	mov    %rdx,%rdi  // "cout" pointer, 1st arg
   0x555555554d90 <_ZN6Circle4drawEv+46>:	callq  0x555555554a80 <_ZNSolsEi@plt>

   // That's std::basic_ostream<char, std::char_traits<char> >::operator<<(int) ,
   //  cout's way of printing out ints, in this case the "id"

   0x555555554d95 <_ZN6Circle4drawEv+51>:	lea    0x14d(%rip),%rsi        # 0x555555554ee9   // ")"
   0x555555554d9c <_ZN6Circle4drawEv+58>:	mov    %rax,%rdi
   0x555555554d9f <_ZN6Circle4drawEv+61>:	callq  0x555555554a30 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x555555554da4 <_ZN6Circle4drawEv+66>:	nop
   0x555555554da5 <_ZN6Circle4drawEv+67>:	leaveq 
   0x555555554da6 <_ZN6Circle4drawEv+68>:	retq   
   0x555555554da7:	nop

(gdb) x/s 0x555555554ee7
0x555555554ee7:	"("

(gdb) x/s 0x555555554ee9
0x555555554ee9:	")"

// Let's now observe the second loop, where draw() is called for each object,
//   to do the right thing __based on the objects's type (at runtime), not the pointer's
//   type (statically known from the source)__.
// This is the trick behind "polymorphism". It is simply runtime (double) indirection
//   when calling a function through a vtable pointer!

(gdb) disas
Dump of assembler code for function main:
   0x0000555555554baa <+0>:	push   %rbp
   0x0000555555554bab <+1>:	mov    %rsp,%rbp
   0x0000555555554bae <+4>:	push   %rbx
   0x0000555555554baf <+5>:	sub    $0x78,%rsp
   0x0000555555554bb3 <+9>:	mov    %fs:0x28,%rax
   0x0000555555554bbc <+18>:	mov    %rax,-0x18(%rbp)
   0x0000555555554bc0 <+22>:	xor    %eax,%eax
   0x0000555555554bc2 <+24>:	movl   $0x0,-0x78(%rbp)
   0x0000555555554bc9 <+31>:	cmpl   $0x9,-0x78(%rbp)
   0x0000555555554bcd <+35>:	jg     0x555555554c55 <main+171>
   0x0000555555554bd3 <+41>:	mov    -0x78(%rbp),%eax
   0x0000555555554bd6 <+44>:	and    $0x1,%eax
   0x0000555555554bd9 <+47>:	test   %eax,%eax
   0x0000555555554bdb <+49>:	je     0x555555554c05 <main+91>
   0x0000555555554bdd <+51>:	mov    $0x10,%edi
   0x0000555555554be2 <+56>:	callq  0x555555554a40 <_Znwm@plt>
   0x0000555555554be7 <+61>:	mov    %rax,%rbx
   0x0000555555554bea <+64>:	movq   $0x0,(%rbx)
   0x0000555555554bf1 <+71>:	movl   $0x0,0x8(%rbx)
   0x0000555555554bf8 <+78>:	mov    %rbx,%rdi
   0x0000555555554bfb <+81>:	callq  0x555555554e08 <_ZN6CircleC2Ev>
   0x0000555555554c00 <+86>:	mov    %rbx,%rdx
   0x0000555555554c03 <+89>:	jmp    0x555555554c2b <main+129>
   0x0000555555554c05 <+91>:	mov    $0x10,%edi
---Type <return> to continue, or q <return> to quit---
   0x0000555555554c0a <+96>:	callq  0x555555554a40 <_Znwm@plt>
   0x0000555555554c0f <+101>:	mov    %rax,%rbx
   0x0000555555554c12 <+104>:	movq   $0x0,(%rbx)
   0x0000555555554c19 <+111>:	movl   $0x0,0x8(%rbx)
   0x0000555555554c20 <+118>:	mov    %rbx,%rdi
   0x0000555555554c23 <+121>:	callq  0x555555554e32 <_ZN6SquareC2Ev>
   0x0000555555554c28 <+126>:	mov    %rbx,%rdx
   0x0000555555554c2b <+129>:	mov    -0x78(%rbp),%eax
   0x0000555555554c2e <+132>:	cltq   
   0x0000555555554c30 <+134>:	mov    %rdx,-0x70(%rbp,%rax,8)
   0x0000555555554c35 <+139>:	mov    -0x78(%rbp),%eax
   0x0000555555554c38 <+142>:	cltq   
   0x0000555555554c3a <+144>:	mov    -0x70(%rbp,%rax,8),%rax
   0x0000555555554c3f <+149>:	mov    -0x78(%rbp),%edx
   0x0000555555554c42 <+152>:	mov    %edx,%esi
   0x0000555555554c44 <+154>:	mov    %rax,%rdi
   0x0000555555554c47 <+157>:	callq  0x555555554d3e <_ZN5Shape6set_idEi>
   0x0000555555554c4c <+162>:	addl   $0x1,-0x78(%rbp)
   0x0000555555554c50 <+166>:	jmpq   0x555555554bc9 <main+31>
=> 0x0000555555554c55 <+171>:	movl   $0x0,-0x74(%rbp)
   0x0000555555554c5c <+178>:	cmpl   $0x9,-0x74(%rbp)
   0x0000555555554c60 <+182>:	jg     0x555555554c87 <main+221>
   0x0000555555554c62 <+184>:	mov    -0x74(%rbp),%eax
   0x0000555555554c65 <+187>:	cltq   
   0x0000555555554c67 <+189>:	mov    -0x70(%rbp,%rax,8),%rdx   // Shape *this, actually for a Circle or a Square
---Type <return> to continue, or q <return> to quit---
   0x0000555555554c6c <+194>:	mov    -0x74(%rbp),%eax
   0x0000555555554c6f <+197>:	cltq   
   0x0000555555554c71 <+199>:	mov    -0x70(%rbp,%rax,8),%rax
   0x0000555555554c76 <+204>:	mov    (%rax),%rax               // fetch vtable pointer 
   0x0000555555554c79 <+207>:	mov    (%rax),%rax               // fetch the method /function pointer 
   0x0000555555554c7c <+210>:	mov    %rdx,%rdi
   0x0000555555554c7f <+213>:	callq  *%rax                     // ..call method through pointer 
   0x0000555555554c81 <+215>:	addl   $0x1,-0x74(%rbp)
   0x0000555555554c85 <+219>:	jmp    0x555555554c5c <main+178>
   0x0000555555554c87 <+221>:	mov    0x201342(%rip),%rax        # 0x555555755fd0
   0x0000555555554c8e <+228>:	mov    %rax,%rsi
   0x0000555555554c91 <+231>:	lea    0x201388(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x0000555555554c98 <+238>:	callq  0x555555554a50 <_ZNSolsEPFRSoS_E@plt>
   0x0000555555554c9d <+243>:	mov    $0x0,%eax
   0x0000555555554ca2 <+248>:	mov    -0x18(%rbp),%rcx
   0x0000555555554ca6 <+252>:	xor    %fs:0x28,%rcx
   0x0000555555554caf <+261>:	je     0x555555554cb6 <main+268>
   0x0000555555554cb1 <+263>:	callq  0x555555554a60 <__stack_chk_fail@plt>
   0x0000555555554cb6 <+268>:	add    $0x78,%rsp
   0x0000555555554cba <+272>:	pop    %rbx
   0x0000555555554cbb <+273>:	pop    %rbp
   0x0000555555554cbc <+274>:	retq   
End of assembler dump.

// Set a breakpoint just before draw() is invoked for an object:

(gdb) b *0x0000555555554c71
Breakpoint 3 at 0x555555554c71

(gdb) c
Continuing.

Breakpoint 3, 0x0000555555554c71 in main ()

// The first pointer from line[] is about to be brought into RAX:

(gdb) i r rax
rax            0x0	0

(gdb) si
0x0000555555554c76 in main ()

// now RAX has the address in line[0]

(gdb) i r rax
rax            0x555555768e70	93824994414192

// ..and now the first hidden member of the object at that address, a Square, is fetched.

(gdb) si
0x0000555555554c79 in main ()

(gdb) i r rax
rax            0x555555755ce0	93824994335968

// This is a pointer into Square's vtable, to its first virtual function, draw():

(gdb) x/2a 0x555555755ce0 
0x555555755ce0 <_ZTV6Square+16>:	0x555555554da8 <_ZN6Square4drawEv>	0x0

(gdb) si
0x0000555555554c7c in main ()

// ..and now we are ready to call Square's draw(),  with
//         0x0000555555554c7f <+213>:   callq  *%rax
//   and "this" copied into rdi (at 0x0000555555554c7c)

(gdb) i r rax
rax            0x555555554da8	93824992234920

// No surprises here:

(gdb) x/20i 0x555555554da8
   0x555555554da8 <_ZN6Square4drawEv>:	push   %rbp
   0x555555554da9 <_ZN6Square4drawEv+1>:	mov    %rsp,%rbp
   0x555555554dac <_ZN6Square4drawEv+4>:	sub    $0x10,%rsp
   0x555555554db0 <_ZN6Square4drawEv+8>:	mov    %rdi,-0x8(%rbp)
   0x555555554db4 <_ZN6Square4drawEv+12>:	lea    0x130(%rip),%rsi        # 0x555555554eeb
   0x555555554dbb <_ZN6Square4drawEv+19>:       lea    0x20125e(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x555555554dc2 <_ZN6Square4drawEv+26>:	callq  0x555555554a30 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x555555554dc7 <_ZN6Square4drawEv+31>:	mov    %rax,%rdx
   0x555555554dca <_ZN6Square4drawEv+34>:	mov    -0x8(%rbp),%rax
   0x555555554dce <_ZN6Square4drawEv+38>:	mov    0x8(%rax),%eax
   0x555555554dd1 <_ZN6Square4drawEv+41>:	mov    %eax,%esi
   0x555555554dd3 <_ZN6Square4drawEv+43>:	mov    %rdx,%rdi
   0x555555554dd6 <_ZN6Square4drawEv+46>:	callq  0x555555554a80 <_ZNSolsEi@plt>
   0x555555554ddb <_ZN6Square4drawEv+51>:	
    lea    0x10b(%rip),%rsi        # 0x555555554eed
   0x555555554de2 <_ZN6Square4drawEv+58>:	mov    %rax,%rdi
   0x555555554de5 <_ZN6Square4drawEv+61>:	
    callq  0x555555554a30 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x555555554dea <_ZN6Square4drawEv+66>:	nop
   0x555555554deb <_ZN6Square4drawEv+67>:	leaveq 
   0x555555554dec <_ZN6Square4drawEv+68>:	retq   
   0x555555554ded:	nop
(gdb) 

----------[ Reading mangled symbols with readelf ]----------

readelf -s shapes | grep _Z
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZSt4endlIcSt11char_trait@GLIBCXX_3.4 (3)
     3: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTVN10__cxxabiv117__clas@CXXABI_1.3 (4)
     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZStlsISt11char_traitsIcE@GLIBCXX_3.4 (3)
     6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _Znwm@GLIBCXX_3.4 (3)
     7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSolsEPFRSoS_E@GLIBCXX_3.4 (3)
     9: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4 (3)
    10: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSolsEi@GLIBCXX_3.4 (3)
    11: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTVN10__cxxabiv121__vmi_@CXXABI_1.3 (4)
    16: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4 (3)
    17: 0000000000202020   272 OBJECT  GLOBAL DEFAULT   25 _ZSt4cout@GLIBCXX_3.4 (3)
    36: 0000000000000ee4     1 OBJECT  LOCAL  DEFAULT   16 _ZStL19piecewise_construc
    37: 0000000000202131     1 OBJECT  LOCAL  DEFAULT   25 _ZStL8__ioinit
    38: 0000000000000cbd    73 FUNC    LOCAL  DEFAULT   14 _Z41__static_initializati
    48: 0000000000201d40    40 OBJECT  WEAK   DEFAULT   21 _ZTI6Circle
    50: 0000000000000e32    41 FUNC    WEAK   DEFAULT   14 _ZN6SquareC1Ev
    53: 0000000000000ef8     8 OBJECT  WEAK   DEFAULT   16 _ZTS6Circle
    56: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZSt4endlIcSt11char_trait
    57: 0000000000201d68    16 OBJECT  WEAK   DEFAULT   21 _ZTI5Shape
    59: 0000000000000d1c    34 FUNC    WEAK   DEFAULT   14 _ZN5Shape4drawEv
    60: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTVN10__cxxabiv117__clas
    62: 0000000000000ef0     8 OBJECT  WEAK   DEFAULT   16 _ZTS6Square
    63: 0000000000000e32    41 FUNC    WEAK   DEFAULT   14 _ZN6SquareC2Ev
    66: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZStlsISt11char_traitsIcE
    67: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _Znwm@@GLIBCXX_3.4
    68: 0000000000000e08    41 FUNC    WEAK   DEFAULT   14 _ZN6CircleC2Ev
    69: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSolsEPFRSoS_E@@GLIBCXX
    72: 0000000000201d00    24 OBJECT  WEAK   DEFAULT   21 _ZTV5Shape
    74: 0000000000000dee    25 FUNC    WEAK   DEFAULT   14 _ZN5ShapeC1Ev
    75: 0000000000201ce8    24 OBJECT  WEAK   DEFAULT   21 _ZTV6Circle
    76: 0000000000202020   272 OBJECT  GLOBAL DEFAULT   25 _ZSt4cout@@GLIBCXX_3.4
    77: 0000000000000d62    69 FUNC    WEAK   DEFAULT   14 _ZN6Circle4drawEv
    79: 0000000000000da8    69 FUNC    WEAK   DEFAULT   14 _ZN6Square4drawEv
    81: 0000000000000e08    41 FUNC    WEAK   DEFAULT   14 _ZN6CircleC1Ev
    82: 0000000000000f00     7 OBJECT  WEAK   DEFAULT   16 _ZTS5Shape
    84: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt8ios_base4InitC1Ev@@
    86: 0000000000000dee    25 FUNC    WEAK   DEFAULT   14 _ZN5ShapeC2Ev
    87: 0000000000201cd0    24 OBJECT  WEAK   DEFAULT   21 _ZTV6Square
    88: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSolsEi@@GLIBCXX_3.4
    89: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTVN10__cxxabiv121__vmi_
    91: 0000000000000d3e    36 FUNC    WEAK   DEFAULT   14 _ZN5Shape6set_idEi
    96: 0000000000201d18    40 OBJECT  WEAK   DEFAULT   21 _ZTI6Square
    97: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt8ios_base4InitD1Ev@@
sergey@babylon2:~/Cplusplus$ 

// Same thing with "nm" utility:

sergey@babylon2:~/Cplusplus$ nm shapes | grep _Z 
0000000000000cbd t _Z41__static_initialization_and_destruction_0ii
0000000000000d1c W _ZN5Shape4drawEv
0000000000000d3e W _ZN5Shape6set_idEi
0000000000000dee W _ZN5ShapeC1Ev
0000000000000dee W _ZN5ShapeC2Ev
0000000000000d62 W _ZN6Circle4drawEv
0000000000000e08 W _ZN6CircleC1Ev
0000000000000e08 W _ZN6CircleC2Ev
0000000000000da8 W _ZN6Square4drawEv
0000000000000e32 W _ZN6SquareC1Ev
0000000000000e32 W _ZN6SquareC2Ev
                 U _ZNSolsEi@@GLIBCXX_3.4
                 U _ZNSolsEPFRSoS_E@@GLIBCXX_3.4
                 U _ZNSt8ios_base4InitC1Ev@@GLIBCXX_3.4
                 U _ZNSt8ios_base4InitD1Ev@@GLIBCXX_3.4
                 U _Znwm@@GLIBCXX_3.4
0000000000202020 B _ZSt4cout@@GLIBCXX_3.4
                 U _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@@GLIBCXX_3.4
0000000000000ee4 r _ZStL19piecewise_construct
0000000000202131 b _ZStL8__ioinit
                 U _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@@GLIBCXX_3.4
0000000000201d68 V _ZTI5Shape
0000000000201d40 V _ZTI6Circle
0000000000201d18 V _ZTI6Square
0000000000000f00 V _ZTS5Shape
0000000000000ef8 V _ZTS6Circle
0000000000000ef0 V _ZTS6Square
0000000000201d00 V _ZTV5Shape
0000000000201ce8 V _ZTV6Circle
0000000000201cd0 V _ZTV6Square
                 U _ZTVN10__cxxabiv117__class_type_infoE@@CXXABI_1.3
                 U _ZTVN10__cxxabiv121__vmi_class_type_infoE@@CXXABI_1.3

sergey@babylon2:~/Cplusplus$ man nm

// The same with demangling:

sergey@babylon2:~/Cplusplus$ nm shapes | grep _Z | c++filt 
0000000000000cbd t __static_initialization_and_destruction_0(int, int)
0000000000000d1c W Shape::draw()
0000000000000d3e W Shape::set_id(int)
0000000000000dee W Shape::Shape()
0000000000000dee W Shape::Shape()
0000000000000d62 W Circle::draw()
0000000000000e08 W Circle::Circle()
0000000000000e08 W Circle::Circle()
0000000000000da8 W Square::draw()
0000000000000e32 W Square::Square()
0000000000000e32 W Square::Square()
                 U std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@@GLIBCXX_3.4
                 U std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@@GLIBCXX_3.4
                 U std::ios_base::Init::Init()@@GLIBCXX_3.4
                 U std::ios_base::Init::~Init()@@GLIBCXX_3.4
                 U operator new(unsigned long)@@GLIBCXX_3.4
0000000000202020 B std::cout@@GLIBCXX_3.4
                 U std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@@GLIBCXX_3.4
0000000000000ee4 r std::piecewise_construct
0000000000202131 b std::__ioinit
                 U std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@@GLIBCXX_3.4
0000000000201d68 V typeinfo for Shape
0000000000201d40 V typeinfo for Circle
0000000000201d18 V typeinfo for Square
0000000000000f00 V typeinfo name for Shape
0000000000000ef8 V typeinfo name for Circle
0000000000000ef0 V typeinfo name for Square
0000000000201d00 V vtable for Shape
0000000000201ce8 V vtable for Circle
0000000000201cd0 V vtable for Square
                 U vtable for __cxxabiv1::__class_type_info@@CXXABI_1.3
                 U vtable for __cxxabiv1::__vmi_class_type_info@@CXXABI_1.3
sergey@babylon2:~/Cplusplus$ 

================[ Further reading ]================

Multiple inheritance and virtual inheritance complicate the picture,
but remain tractable when one grasps the basic mechanisms above.

https://shaharmike.com/cpp/vtable-part1/
https://shaharmike.com/cpp/vtable-part2/
https://shaharmike.com/cpp/vtable-part3/
https://shaharmike.com/cpp/vtable-part4/

https://ww2.ii.uj.edu.pl/~kapela/pn/cpp_vtable.html -- more condensed exploration of cases

https://defuse.ca/exploiting-cpp-vtables.htm  -- with an exploit slant

https://www.rpi.edu/dept/cis/software/g77-mingw32/info-html/g++int.html#Vtables

